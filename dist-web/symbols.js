// Auto-generated by package_frontend.ts
export const registry = { tiers: {
  "1": [
    {
      "id": "BONUS HUNT",
      "path": "assets/BONUS HUNT.png",
      "type": "png",
      "name": "BONUS HUNT.png"
    },
    {
      "id": "FREE SPINS",
      "path": "assets/FREE SPINS.png",
      "type": "png",
      "name": "FREE SPINS.png"
    },
    {
      "id": "MULTI",
      "path": "assets/MULTI.png",
      "type": "png",
      "name": "MULTI.png"
    },
    {
      "id": "POKEBALL",
      "path": "assets/POKEBALL.png",
      "type": "png",
      "name": "POKEBALL.png"
    },
    {
      "id": "T1",
      "path": "assets/T1.png",
      "type": "png",
      "name": "T1.png"
    }
  ],
  "2": [
    {
      "id": "T2",
      "path": "assets/T2.png",
      "type": "png",
      "name": "T2.png"
    }
  ],
  "3": [
    {
      "id": "T3",
      "path": "assets/T3.png",
      "type": "png",
      "name": "T3.png"
    }
  ],
  "4": [
    {
      "id": "T4",
      "path": "assets/T4.png",
      "type": "png",
      "name": "T4.png"
    }
  ],
  "5": [
    {
      "id": "T5",
      "path": "assets/T5.png",
      "type": "png",
      "name": "T5.png"
    }
  ]
}, total: 9 };
export function byTier(t){ return (registry.tiers[String(t)]||registry.tiers[t]||[]); }
export function allAssets(){ return ([]).concat(registry.tiers[1]||[], registry.tiers[2]||[], registry.tiers[3]||[], registry.tiers[4]||[], registry.tiers[5]||[]); }
export function randomSymbol(t){ const arr = t? byTier(t): allAssets(); if (!arr.length) return null; return arr[Math.floor(Math.random()*arr.length)]; }
export function popSymbol(imgPath, ms=600){ const o = document.getElementById('overlay'); if (!o) return; const img = document.createElement('img'); img.src = imgPath; img.alt = 'symbol'; img.className = 'pop'; img.style.position='absolute'; img.style.left='50%'; img.style.top='50%'; img.style.transform='translate(-50%, -50%)'; img.style.maxWidth='40%'; img.style.maxHeight='70%'; o.appendChild(img); setTimeout(()=> img.remove(), ms); }
export function popSymbolAt(imgPath, xPct, yPct, ms=600){ const o = document.getElementById('overlay'); if (!o) return; const img = document.createElement('img'); img.src = imgPath; img.alt = 'symbol'; img.className = 'pop'; img.style.position='absolute'; img.style.left=(xPct*100)+'%'; img.style.top=(yPct*100)+'%'; img.style.transform='translate(-50%, -50%)'; img.style.maxWidth='40%'; img.style.maxHeight='70%'; o.appendChild(img); setTimeout(()=> img.remove(), ms); }
// Heuristic mapping from engine symbol ids to available assets
export const engineTierMap = { pikachu:1, charizard:2, squirtle:3, bulbasaur:4, jigglypuff:5, eevee:5, mew:5, snorlax:5 };
const aliasMap = { freespins: ['free spins','freespins','free-spins','scatter'], wild: ['multi','multiplier','x'], pokeball: ['pokeball','poke ball'], masterball: ['master ball','masterball'] };
function extPriority(ext){ switch(String(ext||'').toLowerCase()){ case 'png': return 5; case 'webp': return 4; case 'jpg': case 'jpeg': return 3; case 'svg': return 2; default: return 1; } }
function pickBest(candidates){ if (!candidates || !candidates.length) return null; let best = candidates[0]; let bestScore = extPriority(best.type); for (const c of candidates){ const s = extPriority(c.type); if (s>bestScore){ best = c; bestScore = s; } } return best; }
function findAssetsByExactId(id){ const low = String(id||'').toLowerCase(); return allAssets().filter(a=> String(a.id||'').toLowerCase() === low); }
function findAssetsByLooseMatch(id){ const low = String(id||'').toLowerCase(); return allAssets().filter(a=> String(a.id||'').toLowerCase().includes(low)); }
export function pathFor(symbolId){ const id = String(symbolId||'').toLowerCase(); let found = pickBest(findAssetsByExactId(id)); if (found) return found.path; const aliases = aliasMap[id]; if (aliases){ for (const alt of aliases){ const f = pickBest(findAssetsByLooseMatch(alt)); if (f) return f.path; } } const t = engineTierMap[id]; if (t){ const f = pickBest(findAssetsByExactId('t'+String(t))); if (f) return f.path; } for (let k=1;k<=5;k++){ const f = pickBest(findAssetsByExactId('t'+String(k))); if (f) return f.path; } const any = pickBest(allAssets()); return any? any.path : ''; }
export function spriteFor(symbolId){ const p = pathFor(symbolId); if (!p) return null; return { id: symbolId, path: p }; }
